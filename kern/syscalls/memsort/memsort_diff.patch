diff --git a/Makefile b/Makefile
index 61ebd88..6889ec6 100644
--- a/Makefile
+++ b/Makefile
@@ -1,8 +1,8 @@
 VERSION = 4
 PATCHLEVEL = 12
 SUBLEVEL = 10
-EXTRAVERSION = -ECEN5013
-NAME = Fearless Coyote ECEN5013
+EXTRAVERSION =
+NAME = Fearless Coyote
 
 # *DOCUMENTATION*
 # To see a list of typical targets execute "make help"
@@ -941,7 +941,7 @@ endif
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ memsort/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 05eb401..5aef183 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -380,8 +380,3 @@
 545	x32	execveat		compat_sys_execveat/ptregs
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
-
-#
-# for ECEN5013 system calls
-#
-500 common  memsort     sys_memsort
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 06f18ef..980c3c9 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -906,6 +906,4 @@ asmlinkage long sys_pkey_free(int pkey);
 asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
 
-asmlinkage long sys_memsort(int32_t __user *buf, int32_t size, int32_t *sbuf);
-
 #endif
diff --git a/memsort/Makefile b/memsort/Makefile
deleted file mode 100644
index b66ae84..0000000
--- a/memsort/Makefile
+++ /dev/null
@@ -1,24 +0,0 @@
-################################################################################
-# Copyright (C) 2017 by Ben Heberlein
-#
-# Redistribution, modification or use of this software in source or binary
-# forms is permitted as long as the files maintain this copyright. This file
-# was created for the University of Colorado Boulder course Advanced Practical
-# Embedded Software Development. Ben Heberlein and the University of Colorado 
-# are not liable for any misuse of this material.
-#
-###############################################################################
-##
-## @file Makefile
-## @brief Builds the object file for memsort system call
-## 
-## This file is used by the Linux kernel to build the memsort system call.
-##
-## @author Ben Heberlein
-## @date September 16 2017
-## @version 1.0
-##
-###############################################################################
-
-obj-y += memsort.o
-
diff --git a/memsort/memsort.c b/memsort/memsort.c
deleted file mode 100644
index 544d402..0000000
--- a/memsort/memsort.c
+++ /dev/null
@@ -1,158 +0,0 @@
-/******************************************************************************
-* Copyright (C) 2017 by Ben Heberlein
-*
-* Redistribution, modification or use of this software in source or binary
-* forms is permitted as long as the files maintain this copyright. This file
-* was created for the University of Colorado Boulder course Advanced Practical
-* Embedded Software Development. Ben Heberlein and the University of Colorado 
-* are not liable for any misuse of this material.
-*
-*******************************************************************************/
-/**
- * @file memsort.c
- * @brief Memory sorter system call implementation
- * 
- * This file provides the system call implementation for a memory sorter. The
- * function takes in a pointer to a buffer, a size, and a pointer to a sorted 
- * buffer as parameters. More details are given in the function definition.
- *
- * @author Ben Heberlein
- * @date September 16 2017
- * @version 1.0
- *
- */
-
-#include "linux/types.h"
-#include "linux/kernel.h"
-#include "linux/syscalls.h"
-#include "linux/slab.h"
-
-/**
- * @brief Memory sorter system call
- * 
- * This function sorts the input buffer from largest to smallest, and stores
- * the result in the output buffer. The function will validate all input
- * parameters, and print information to the kernel buffer showing success
- * or failure.
- *
- * @param buf A pointer to a int32_t buffer of input data
- * @param size The size of the buffer as a uin16_t
- * @param sbuf A pointer to a int32_t buffer of sorted data
- *
- * @return A kernel error code from errno.h or errno-base.h
- */
-SYSCALL_DEFINE3(memsort, int32_t __user *, buf, int32_t, size, int32_t __user *, sbuf) {
-    printk(KERN_INFO "memsort: system call starting.\n");
-
-    long ret = 0;
-
-    /* Validate arguments */
-    if (buf == NULL) {
-        printk(KERN_WARNING "memsort: failed with a null pointer argument.\n");
-        return -EFAULT;
-    }
-
-    if (sbuf == NULL) {
-        printk(KERN_WARNING "memsort: failed with a null pointer argument.\n");
-        return -EFAULT;
-    }
-
-    if (size <= 0) {
-        printk(KERN_WARNING "memsort: failed with a negative size argument.\n");
-        return -EINVAL;
-    }
-
-    if (!access_ok(VERIFY_WRITE, buf, size)) {
-        printk(KERN_WARNING "memsort: buffer is not in userspace.\n");
-        return -EFAULT;
-    }
-
-    if (!access_ok(VERIFY_WRITE, sbuf, size)) {
-        printk(KERN_WARNING "memsort: buffer is not in userspace.\n");
-        return - EFAULT;
-    }
-
-    /* Print size of buffer */
-    printk(KERN_INFO "memsort: size of buffer is %d bytes.\n", size*sizeof(int32_t));
-
-    /* Allocate kernel memory for sorting */
-    int32_t *sort = kmalloc(size*sizeof(int32_t), GFP_KERNEL);
-    if (sort == NULL) {
-        printk(KERN_WARNING "memsort: failed to allocate memory.\n");
-        return -ENOMEM;
-    }    
-
-    /* Copy source buffer */
-    if (copy_from_user(sort, buf, size*sizeof(int32_t))) {
-        printk(KERN_WARNING "memsort: failed to copy from user space.\n");
-        kfree(sort);
-        return -EFAULT;
-    }
-
-    /* Sort memory */
-    int32_t temp = 0;
-    int i = 0;
-    int j = 0;
-    for (i = 0; i < size; i++) {
-        for (j = i+1; j < size; j++) {
-            if (sort[i] < sort[j]) {
-                temp = sort[i];
-                sort[i] = sort[j];
-                sort[j] = temp;
-            }
-        }
-    }
-
-    /* Display result */
-    printk(KERN_INFO "memsort: successfully sorted numbers: ");
-    for (i = 0; i < size; i++) {
-        printk(KERN_CONT "%d ", sort[i]);
-    }
-    printk(KERN_CONT ".\n");
-
-    /* Copy back to user */
-    if (copy_to_user(sbuf, sort, size*sizeof(int32_t))) {
-        printk(KERN_WARNING "memsort: failed to copy to user space.\n");
-        kfree(sort);
-        return -EFAULT;
-    } 
-
-    /* Free memory */
-    kfree(sort);
-
-    /* Goodbye */
-    printk(KERN_INFO "memsort: successfully completed.\n");
-
-    return 0;
-}
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
